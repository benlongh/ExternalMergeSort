CSc
345
Project
Russell
Lewis
borrowed
text
from
Rachel
Preamble
345
Project
CS
345
Analysis
of
Discrete
Project
External
Merge
at
Wed
2
Mar
which
are
Quicksort
and
Merge
There
is
a
version
of
Merge
Sort
which
Merge
Sort
for
situations
where
the
data
is
too
large
to
fit
it
all
in
In
a
real
you
might
be
searching
through
a
table
with
billions
of
entries
and
each
entry
might
consume
a
few
dozen
or
a
few
hundred
It
is
quite
for
the
size
of
the
search
space
to
be
more
than
you
can
fit
in
your
memory
even
if
you
are
running
on
a
very
large
To
solve
databases
will
do
partial
sorts
of
the
data
that
they
and
then
write
the
data
out
to
a
temporary
file
on
The
DB
then
loads
in
another
chunk
of
sorts
and
writes
that
chunk
to
The
process
continues
until
all
of
the
data
has
been
broken
into
each
chunk
has
been
and
each
sorted
chunk
stored
to
a
different
In
the
second
the
DB
reads
one
block
from
each
and
does
a
merge
of
all
of
the
data
streams
each
time
that
one
of
the
blocks
is
completely
the
DB
reads
in
another
until
all
of
the
blocks
from
all
of
the
files
have
been
The
result
is
a
long
stream
of
data
written
to
another
or
perhaps
deliverd
to
some
other
which
is
the
sorted
version
of
the
entire
There
are
two
there
might
be
many
So
real
DB
code
is
written
with
the
ability
to
sort
arbitrarily
chunks
that
you
can
fit
even
one
block
for
each
of
them
in
memory
at
the
same
time
meaning
that
the
DB
might
have
to
do
multiple
passes
of
the
Like
Merge
it
would
do
a
then
a
second
pass
and
so
This
is
very
in
modern
DBs
the
memories
are
so
but
theoretically
And
this
is
exactly
what
you
are
going
to
In
this
you
will
implement
the
key
elements
of
external
merge
program
item
Read
words
from
an
input
file
first
command
line
and
write
the
sorted
words
to
an
output
file
second
command
line
item
Break
the
input
into
chunks
of
16
words
no
no
less
for
the
last
which
can
be
item
Use
insertion
sort
to
sort
each
chunk
must
implement
insertion
sort
yourself
you
may
not
use
anything
from
the
Java
standard
item
Write
each
chunk
to
a
temporary
file
item
Merge
pairs
of
temporary
files
storing
the
results
into
new
temporary
item
On
the
last
write
to
the
output
file
instead
of
a
temporary
item
Leave
all
of
the
temporary
files
on
so
that
we
can
inspect
them
Type
and
File
You
will
read
from
the
input
sort
them
using
and
write
them
back
out
to
the
output
The
input
may
have
many
words
on
the
same
your
temporary
files
and
likewise
your
final
output
file
should
print
out
exactly
one
word
per
with
no
leading
or
trailing
You
are
encouraged
not
to
use
the
and
its
to
read
the
input
file
and
your
temporary
During
the
first
pass
through
the
data
it
into
you
must
never
store
more
than
16
words
at
a
Read
16
sort
and
write
them
you
hit
with
fewer
than
16
sort
the
values
that
you
and
write
them
out
as
the
last
While
doing
you
must
never
store
more
than
word
per
input
file
at
a
That
you
may
read
the
first
word
from
each
file
but
not
the
When
you
output
a
you
may
read
the
next
from
that
File
Naming
We
want
to
be
able
to
test
your
code
automatically
as
much
as
For
this
your
code
must
name
its
temporary
files
with
exactly
this
where
are
decimal
values
that
count
from
For
the
first
four
temporary
files
you
create
should
always
be
this
assumes
that
there
is
enough
data
in
the
input
file
to
use
4
When
you
merge
those
four
files
into
two
they
will
be
named
where
is
the
merge
of
and
Cases
and
Other
item
If
the
input
file
has
16
words
or
write
the
sorted
words
to
the
output
file
and
do
not
create
any
temporary
item
If
the
input
file
has
some
multiple
of
16
make
sure
that
you
do
write
out
an
extra
which
has
zero
words
in
item
Never
write
out
a
temporary
file
for
the
last
write
directly
to
the
output
item
If
there
are
an
odd
number
of
chunks
to
merge
in
any
do
duplicate
the
odd
leave
it
and
merge
it
on
a
later
Class
and
Command
Line
Write
your
code
in
Your
class
should
be
named
Your
program
must
support
the
command
line
arguments
described
then
If
you
add
support
for
any
other
command
line
that
is
permissible
so
long
as
you
support
the
one
we
test
that
you
will
never
crash
with
an
as
described
Your
program
should
not
crash
due
to
exceptions
so
check
your
command
line
arguments
before
you
use
If
the
input
file
does
not
catch
that
exception
and
print
a
useful
error
The
only
exception
to
this
rule
is
that
exceptions
thrown
as
part
of
writing
to
a
temporary
file
or
the
output
If
you
attempt
to
open
a
file
and
it
throws
an
exception
if
you
attempt
to
write
to
a
file
and
it
throws
an
it
is
permissible
for
your
program
to
Your
code
compile
on
using
If
you
write
your
code
in
an
IDE
you
may
have
added
some
statements
which
will
make
your
code
not
compile
on
Lectura
if
make
sure
to
remove
them
before
you
turn
in
your
Code
that
does
not
compile
will
not
be
if
you
have
to
turn
in
a
replacement
version
to
fix
a
compile
it
will
be
treated
as
if
it
was
late
by
one
day
one
as
the
case
may
and
You
must
comment
your
Make
sure
that
your
comments
are
they
need
to
express
both
what
you
are
trying
to
and
how
you
plan
to
do
Clear
comments
will
make
it
easier
for
us
to
grade
your
and
to
give
you
partial
credit
we
find
Use
good
Java
programming
including
good
use
of
consistent
and
meaningful
variable
Follow
the
Java
variable
naming
conventions
with
and
camel
case
after
Each
file
should
include
a
header
which
item
Java
class
name
item
Our
class
and
assignment
name
345
Spring
16
Project
item
Your
name
item
A
description
of
the
basics
of
the
class
in
Your
At
you
must
turn
in
the
following
you
add
any
additional
then
turn
in
those
as
Be
careful
to
turn
in
the
files
and
not
the
noindent
Turn
in
the
files
using
the
assignment
name
you
remember
how
to
use
from
previous
CS
here
are
a
few
item
can
only
be
run
from
upload
your
files
to
lectura
using
SCP
a
thumb
drive
in
the
item
To
turn
in
use
the
turnin
item
To
confirm
that
your
files
have
been
turned
in
check
with
the
turnin
item
You
may
turn
in
as
many
times
as
you
turn
in
one
file
at
a
or
all
of
them
You
may
also
turn
in
the
same
file
multiple
turnin
will
only
keep
the
most
recent
